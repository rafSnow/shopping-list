import * as Notifications from 'expo-notifications';
import { Platform } from 'react-native';

// ============================================
// Configura√ß√£o do comportamento das notifica√ß√µes
// ============================================

Notifications.setNotificationHandler({
  handleNotification: async () => ({
    shouldShowAlert: true,
    shouldPlaySound: true,
    shouldSetBadge: true,
  }),
});

// ============================================
// Fun√ß√µes de Permiss√£o
// ============================================

/**
 * Solicitar permiss√£o para notifica√ß√µes
 * @returns true se permiss√£o foi concedida
 */
export async function requestNotificationPermissions(): Promise<boolean> {
  try {
    const { status: existingStatus } = await Notifications.getPermissionsAsync();
    let finalStatus = existingStatus;

    if (existingStatus !== 'granted') {
      const { status } = await Notifications.requestPermissionsAsync();
      finalStatus = status;
    }

    if (finalStatus !== 'granted') {
      console.log('‚ö†Ô∏è Permiss√£o para notifica√ß√µes negada');
      return false;
    }

    console.log('‚úÖ Permiss√£o para notifica√ß√µes concedida');
    return true;
  } catch (error) {
    console.error('Erro ao solicitar permiss√£o para notifica√ß√µes:', error);
    return false;
  }
}

// ============================================
// Fun√ß√µes de Notifica√ß√£o
// ============================================

/**
 * Agendar notifica√ß√£o local
 * @param title T√≠tulo da notifica√ß√£o
 * @param body Corpo da notifica√ß√£o
 * @param seconds Segundos at√© mostrar (0 = imediato)
 * @returns ID da notifica√ß√£o agendada
 */
export async function scheduleLocalNotification(
  title: string,
  body: string,
  seconds: number = 0
): Promise<string | null> {
  try {
    const hasPermission = await requestNotificationPermissions();

    if (!hasPermission) {
      console.log('‚ùå N√£o foi poss√≠vel enviar notifica√ß√£o - permiss√£o negada');
      return null;
    }

    const notificationId = await Notifications.scheduleNotificationAsync({
      content: {
        title,
        body,
        sound: true,
        priority: Notifications.AndroidNotificationPriority.HIGH,
        badge: 1,
      },
      trigger: seconds > 0 ? { seconds } : null, // null = imediato
    });

    console.log('‚úÖ Notifica√ß√£o agendada:', notificationId);
    return notificationId;
  } catch (error) {
    console.error('Erro ao agendar notifica√ß√£o:', error);
    return null;
  }
}

// ============================================
// Notifica√ß√µes Espec√≠ficas do App
// ============================================

/**
 * Notificar quando item for adicionado
 */
export async function notifyItemAdded(itemName: string): Promise<void> {
  try {
    await scheduleLocalNotification(
      '‚úÖ Item Adicionado',
      `"${itemName}" foi adicionado √† lista!`,
      0 // Imediato
    );
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de item adicionado:', error);
  }
}

/**
 * Notificar quando item for removido
 */
export async function notifyItemRemoved(itemName: string): Promise<void> {
  try {
    await scheduleLocalNotification(
      'üóëÔ∏è Item Removido',
      `"${itemName}" foi removido da lista!`,
      0
    );
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de item removido:', error);
  }
}

/**
 * Notificar quando lista for limpa
 */
export async function notifyListCleared(count: number): Promise<void> {
  try {
    await scheduleLocalNotification(
      'üßπ Lista Limpa',
      `${count} ${count === 1 ? 'item foi removido' : 'itens foram removidos'}!`,
      0
    );
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de lista limpa:', error);
  }
}

/**
 * Notificar quando houver erro
 */
export async function notifyError(message: string): Promise<void> {
  try {
    await scheduleLocalNotification(
      '‚ùå Erro',
      message,
      0
    );
  } catch (error) {
    console.error('Erro ao enviar notifica√ß√£o de erro:', error);
  }
}

/**
 * Lembrete di√°rio para checar lista
 * Agenda notifica√ß√£o para todo dia √†s 10h
 */
export async function scheduleDailyReminder(): Promise<void> {
  try {
    const hasPermission = await requestNotificationPermissions();

    if (!hasPermission) {
      console.log('‚ùå N√£o foi poss√≠vel agendar lembrete - permiss√£o negada');
      return;
    }

    // Cancelar lembretes anteriores
    await Notifications.cancelAllScheduledNotificationsAsync();

    // Agendar para todo dia √†s 10h
    await Notifications.scheduleNotificationAsync({
      content: {
        title: 'üõí Lembrete da Lista de Compras',
        body: 'N√£o esque√ßa de verificar sua lista de compras!',
        sound: true,
        priority: Notifications.AndroidNotificationPriority.DEFAULT,
      },
      trigger: {
        hour: 10,
        minute: 0,
        repeats: true,
      },
    });

    console.log('‚úÖ Lembrete di√°rio agendado para 10h');
  } catch (error) {
    console.error('Erro ao agendar lembrete di√°rio:', error);
  }
}

/**
 * Cancelar lembrete di√°rio
 */
export async function cancelDailyReminder(): Promise<void> {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log('‚úÖ Lembrete di√°rio cancelado');
  } catch (error) {
    console.error('Erro ao cancelar lembrete di√°rio:', error);
  }
}

/**
 * Cancelar todas as notifica√ß√µes agendadas
 */
export async function cancelAllNotifications(): Promise<void> {
  try {
    await Notifications.cancelAllScheduledNotificationsAsync();
    console.log('‚úÖ Todas as notifica√ß√µes canceladas');
  } catch (error) {
    console.error('Erro ao cancelar notifica√ß√µes:', error);
  }
}

/**
 * Obter todas as notifica√ß√µes agendadas
 */
export async function getScheduledNotifications(): Promise<Notifications.NotificationRequest[]> {
  try {
    const notifications = await Notifications.getAllScheduledNotificationsAsync();
    console.log(`üìã ${notifications.length} notifica√ß√µes agendadas`);
    return notifications;
  } catch (error) {
    console.error('Erro ao obter notifica√ß√µes agendadas:', error);
    return [];
  }
}
